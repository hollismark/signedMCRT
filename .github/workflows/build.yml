name: CI

on: [push, pull_request]

env:
  BUILD_DIR: _build
  PIP_PACKAGES: >-
    gcovr
  MACOS_BASEKIT_URL: >-
    https://registrationcenter-download.intel.com/akdlm/irc_nas/17969/m_BaseKit_p_2021.3.0.3043.dmg
  MACOS_HPCKIT_URL: >-
    https://registrationcenter-download.intel.com/akdlm/irc_nas/17890/m_HPCKit_p_2021.3.0.3226_offline.dmg
  LINUX_INTEL_COMPONENTS: >-
    intel-oneapi-compiler-fortran-2021.2.0
    intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2021.2.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build: [fpm]
        build-type: [debug]
        compiler: [gnu]
        version: [10]

        include:
        - os: ubuntu-latest
          build: fpm
          build-type: debug
          compiler: intel
          version: 2021

    defaults:
      run:
        shell: ${{ matrix.shell || 'bash' }}

    env:
      FC: ${{ matrix.compiler == 'intel' && 'ifort' || 'gfortran' }}
      CC: ${{ matrix.compiler == 'intel' && 'icc' || 'gcc' }}
      GCC_V: ${{ matrix.version }}
      PYTHON_V: 3.8

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install GCC (OSX)
      if: ${{ contains(matrix.os, 'macos') && matrix.compiler == 'gnu' }}
      run: |
        brew install gcc@${{ env.GCC_V }}
        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
        ln -s /usr/local/bin/gcc-${{ env.GCC_V }} /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-${{ env.GCC_V }} /usr/local/bin/g++

    - name: Install GCC (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-${{ env.GCC_V}} gfortran-${{ env.GCC_V }}
        sudo update-alternatives \
        --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }} \
        --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}

    - name: wget (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') }}
      uses: wei/wget@v1
      with:
        args: -O fpm https://github.com/fortran-lang/fpm/releases/download/current/fpm-linux-x86_64 

    - name: wget (OSX)
      if: ${{ contains(matrix.os, 'macos') }}
      run: |
        brew install wget
        wget -O fpm https://github.com/fortran-lang/fpm/releases/download/current/fpm-macos-x86_64

    - name: Install FPM
      run: |
        sudo chmod +x fpm

    - name: Prepare for cache restore
      if: ${{ matrix.compiler == 'intel' && contains(matrix.os, 'ubuntu')}}
      run: |
        sudo mkdir -p /opt/intel
        sudo chown $USER /opt/intel

    - name: Cache Intel install
      if: ${{ matrix.compiler == 'intel' && contains(matrix.os, 'ubuntu')}}
      id: cache-install
      uses: actions/cache@v2
      with:
        path: /opt/intel/oneapi
        key: install-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}

    - name: Install Intel (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'intel') && steps.cache-install.outputs.cache-hit != 'true' }}
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/${{ env.KEY }}
        sudo apt-key add ${{ env.KEY }}
        rm ${{ env.KEY }}
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install ${{ env.PKG }}
      env:
        KEY: GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        PKG: ${{ env.LINUX_INTEL_COMPONENTS }}

    - name: Setup Intel oneAPI environment
      if: ${{ matrix.compiler == 'intel' && contains(matrix.os, 'ubuntu')}}
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Build and compile (Intel)
      if: ${{ contains(matrix.build, 'fpm') && matrix.compiler == 'intel' }}
      run: ./fpm @buildintel

    - name: Test and compile (Intel)
      if: ${{ contains(matrix.build, 'fpm') && matrix.compiler == 'intel' }}
      run: ./fpm @testintel

    - name: Build and compile (GNU)
      if: ${{ contains(matrix.build, 'fpm') && matrix.compiler == 'gnu' }}
      run: ./fpm build

    - name: Test and compile (GNU)
      if: ${{ contains(matrix.build, 'fpm') && matrix.compiler == 'gnu' }}
      run: ./fpm test

    - name: Run CodeCov
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
      run: |
        gcov ./build/gfortran_*/sMCRT/src*.gcda -r ./src/ -b
    
    - name: Codecov
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
      uses: codecov/codecov-action@v3.1.1